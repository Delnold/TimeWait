# docker-compose.yml

version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: queuetracker-backend
    restart: always
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app  # For live development; remove in production
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: queuetracker-frontend
    restart: always
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src  # For live development; remove in production
      - ./frontend/public:/app/public  # For live development; remove in production
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enable polling for file changes in Windows
    command: npm start

  db:
    image: postgres:14
    container_name: queuetracker-db
    restart: always
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youruser -d queuetracker"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data:
